{"version":3,"sources":["utility.js","App.js","serviceWorker.js","index.js"],"names":["getRandomInt","max","min","res","Math","floor","random","OPTIONS_TYPE","value","label","App","props","onClickPrint","window","print","changeInput","e","name","console","log","target","setState","getTableContent","state","howMany","scope","tableContent01","i","tr01","j","push","getTd","className","tableContent","obj01","getTwoNumbers","op1","sum01","a","b","onClickCreate","onClickSaveParams","type","class01","time","copy","localStorage","setItem","JSON","stringify","handleOnChange","newValue","getItem","parse","this","Container","Card","Header","Body","Form","Row","Group","as","Col","controlId","Label","Control","onChange","placeholder","options","isMulti","Button","variant","size","onClick","id","Table","responsive","colSpan","Component","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"gVACO,SAASA,EAAaC,GAAe,IAAVC,EAAS,uDAAH,EACtC,GAAID,EAAMC,EAAK,OAAO,KACtB,GAAID,IAAQC,EAAK,OAAOD,EACxB,IAAIE,EAAMC,KAAKC,MAAMD,KAAKE,SAAWF,KAAKC,MAAMJ,GAAO,GAKvD,OAJIE,EAAMD,IACRC,EAAMH,EAAaC,EAAKC,IAGnBC,EA6BF,IAAMI,EAAe,CAC1B,CAAEC,MAAO,IAAKC,MAAO,gBACrB,CAAED,MAAO,IAAKC,MAAO,gBACrB,CAAED,MAAO,IAAKC,MAAO,6BC1BFC,E,kDACnB,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAiBRC,aAAe,WACbC,OAAOC,SAnBU,EAsBnBC,YAAc,SAACC,EAAGC,GAChBC,QAAQC,IAAI,iBAAkBH,EAAEI,OAAOZ,OACvC,EAAKa,SAAL,eACGJ,EAAOD,EAAEI,OAAOZ,SAzBF,EA6BnBc,gBAAkB,WAGhB,IAHuB,IAAD,EACK,EAAKC,MAAxBC,EADc,EACdA,QAASC,EADK,EACLA,MACbC,EAAiB,GACZC,EAAI,EAAGA,EAAIH,EAAU,EAAGG,IAAK,CACpC,IAAIC,EAAO,GACPC,OAAC,EACL,IAAKA,EAAI,EAAGA,EAAI,EAAGA,IACjBD,EAAKE,KAAK,EAAKC,MAAMN,IAEvBC,EAAeI,KAAK,wBAAIE,UAAU,iBAAiBJ,IAErD,EAAKP,SAAS,CACZY,aAAcP,KAzCC,EA6CnBK,MAAQ,WAAO,IACE9B,EAAQ,EAAKsB,MAApBE,MAER,IAAKxB,EAAK,OAAO,KACjB,IAAIiC,EDpDD,SAASC,EAAclC,GAC5B,IAAMmC,EAAMpC,EAAa,GACnBqC,EAAQrC,EAAaC,EAAK,IAC1BqC,EAAItC,EAAaqC,EAAQ,GACzBE,EAAIF,EAAQC,EAElB,OAAIC,EAAI,GACCJ,EAAclC,GAGX,IAARmC,EACK,CACLE,IACAC,IACAH,OAGK,CACLE,EAAGD,EACHE,IACAH,OCgCUD,CAAclC,GAC1B,OACE,4BACGiC,EAAMI,EADT,IAC2B,IAAdJ,EAAME,IAAY,IAAM,IADrC,IAC2CF,EAAMK,EAC9C,OArDY,EA0DnBC,cAAgB,WACd,EAAKlB,mBA3DY,EA8DnBmB,kBAAoB,WAAO,IAAD,EACoC,EAAKlB,MAAzDE,EADgB,EAChBA,MAAOD,EADS,EACTA,QAASkB,EADA,EACAA,KAAMC,EADN,EACMA,QAAS1B,EADf,EACeA,KAAM2B,EADrB,EACqBA,KAAMC,EAD3B,EAC2BA,KAEnDC,aAAaC,QAAQ,QAAStB,GAC9BqB,aAAaC,QAAQ,UAAWvB,GAChCsB,aAAaC,QAAQ,OAAQC,KAAKC,UAAUP,IAC5CI,aAAaC,QAAQ,UAAWJ,GAChCG,aAAaC,QAAQ,OAAQ9B,GAC7B6B,aAAaC,QAAQ,OAAQH,GAC7BE,aAAaC,QAAQ,OAAQF,IAvEZ,EA0EnBK,eAAiB,SAACC,GAChB,EAAK9B,SAAS,CACZqB,KAAMS,KAzER,EAAK5B,MAAQ,CACXE,MAAOqB,aAAaM,QAAQ,UAAY,IACxC5B,QAASsB,aAAaM,QAAQ,YAAc,IAC5CV,KAAMM,KAAKK,MAAMP,aAAaM,QAAQ,UAAY,CAChD7C,EAAa,GACbA,EAAa,IAEfoC,QAASG,aAAaM,QAAQ,YAAc,GAC5CnC,KAAM6B,aAAaM,QAAQ,SAAW,GACtCR,KAAME,aAAaM,QAAQ,SAAW,EACtCP,KAAMC,aAAaM,QAAQ,SAAW,EACtCnB,aAAc,IAdC,E,qDAgFT,IAAD,SAUHqB,KAAK/B,MARPE,EAFK,EAELA,MACAD,EAHK,EAGLA,QACAkB,EAJK,EAILA,KACAC,EALK,EAKLA,QACA1B,EANK,EAMLA,KACA2B,EAPK,EAOLA,KACAC,EARK,EAQLA,KACAZ,EATK,EASLA,aAGF,OACE,yBAAKD,UAAU,OACb,kBAACuB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAMxB,UAAU,YACd,kBAACwB,EAAA,EAAKC,OAAN,CAAazB,UAAU,0BAAvB,wFAGA,kBAACwB,EAAA,EAAKE,KAAN,KACE,kBAACC,EAAA,EAAD,KACE,kBAACA,EAAA,EAAKC,IAAN,KACE,kBAACD,EAAA,EAAKE,MAAN,CAAYC,GAAIC,IAAKC,UAAU,aAC7B,kBAACL,EAAA,EAAKM,MAAN,sBAAiBxC,EAAjB,gBACA,kBAACkC,EAAA,EAAKO,QAAN,CACE1D,MAAOiB,EACP0C,SAAU,SAACnD,GAAD,OAAO,EAAKD,YAAYC,EAAG,aAIzC,kBAAC2C,EAAA,EAAKE,MAAN,CAAYC,GAAIC,IAAKC,UAAU,eAC7B,kBAACL,EAAA,EAAKM,MAAN,qBACA,kBAACN,EAAA,EAAKO,QAAN,CACEE,YAAY,MACZ5D,MAAOgB,EACP2C,SAAU,SAACnD,GAAD,OAAO,EAAKD,YAAYC,EAAG,eAIzC,kBAAC2C,EAAA,EAAKE,MAAN,CAAYC,GAAIC,IAAKC,UAAU,YAC7B,kBAACL,EAAA,EAAKM,MAAN,qBACA,kBAAC,IAAD,CACEI,QAAS9D,EACT4D,SAAUb,KAAKJ,eACfjC,KAAK,OACLqD,SAAO,EACP9D,MAAOkC,MAIb,kBAACiB,EAAA,EAAKC,IAAN,KACE,kBAACD,EAAA,EAAKE,MAAN,CAAYC,GAAIC,IAAKC,UAAU,YAC7B,kBAACL,EAAA,EAAKM,MAAN,qBACA,kBAACN,EAAA,EAAKO,QAAN,CACE1D,MAAOS,EACPkD,SAAU,SAACnD,GAAD,OAAO,EAAKD,YAAYC,EAAG,YAGzC,kBAAC2C,EAAA,EAAKE,MAAN,CAAYC,GAAIC,IAAKC,UAAU,aAC7B,kBAACL,EAAA,EAAKM,MAAN,qBACA,kBAACN,EAAA,EAAKO,QAAN,CACE1D,MAAOmC,EACPwB,SAAU,SAACnD,GAAD,OAAO,EAAKD,YAAYC,EAAG,eAGzC,kBAAC2C,EAAA,EAAKE,MAAN,CAAYC,GAAIC,IAAKC,UAAU,YAC7B,kBAACL,EAAA,EAAKM,MAAN,6CACA,kBAACN,EAAA,EAAKO,QAAN,CACE1D,MAAOoC,EACPuB,SAAU,SAACnD,GAAD,OAAO,EAAKD,YAAYC,EAAG,YAGzC,kBAAC2C,EAAA,EAAKE,MAAN,CAAYC,GAAIC,IAAKC,UAAU,YAC7B,kBAACL,EAAA,EAAKM,MAAN,qBACA,kBAACN,EAAA,EAAKO,QAAN,CACEE,YAAY,IACZ5D,MAAOqC,EACPsB,SAAU,SAACnD,GAAD,OAAO,EAAKD,YAAYC,EAAG,cAK7C,yBAAKgB,UAAU,QACb,kBAACuC,EAAA,EAAD,CACEC,QAAQ,UACRC,KAAK,KACLC,QAASpB,KAAKb,mBAHhB,4BAMU,IACV,kBAAC8B,EAAA,EAAD,CACEC,QAAQ,UACRC,KAAK,KACLC,QAASpB,KAAKd,eAHhB,4BAMU,IACV,kBAAC+B,EAAA,EAAD,CAAQC,QAAQ,UAAUC,KAAK,KAAKC,QAASpB,KAAK1C,cAAlD,mBAON,kBAAC4C,EAAA,EAAD,CAAMmB,GAAG,WACP,kBAACnB,EAAA,EAAKC,OAAN,MACA,kBAACD,EAAA,EAAKE,KAAN,KACE,kBAACkB,EAAA,EAAD,CAAOC,YAAU,GACf,+BACE,4BACE,wBAAIC,QAAS,EAAG9C,UAAU,0BACvBP,EADH,iEAIF,wBAAIO,UAAU,eACZ,iDAAQf,GAAc,gBACtB,iDAEG0B,GAAoB,gBAEvB,6DACA,iDAEGC,GAAc,SAFjB,iBAIA,uDAAcpB,EAAd,aAGJ,+BAAQS,Y,GAjNS8C,aCHbC,QACW,cAA7BnE,OAAOoE,SAASC,UAEe,UAA7BrE,OAAOoE,SAASC,UAEhBrE,OAAOoE,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL9E,QAAQ8E,MAAMA,EAAMC,c","file":"static/js/main.d1547e14.chunk.js","sourcesContent":["// return an integer less than max + 1\nexport function getRandomInt(max, min = 1) {\n  if (max < min) return null;\n  if (max === min) return max;\n  let res = Math.floor(Math.random() * Math.floor(max) + 1);\n  if (res < min) {\n    res = getRandomInt(max, min);\n  }\n\n  return res;\n}\n\n// retrun {a: 5, b: 10, op1: 0]\nexport function getTwoNumbers(max) {\n  const op1 = getRandomInt(2);\n  const sum01 = getRandomInt(max, 20);\n  const a = getRandomInt(sum01 - 1);\n  const b = sum01 - a;\n\n  if (b < 10) {\n    return getTwoNumbers(max);\n  }\n\n  if (op1 === 1) {\n    return {\n      a,\n      b,\n      op1,\n    };\n  } else {\n    return {\n      a: sum01,\n      b,\n      op1,\n    };\n  }\n}\n\nexport const OPTIONS_TYPE = [\n  { value: \"1\", label: \"加法\" },\n  { value: \"2\", label: \"减法\" },\n  { value: \"3\", label: \"加减混合\" },\n];\n","import React, { Component } from \"react\";\nimport Select from \"react-select\";\nimport \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport {\n  Container,\n  Table,\n  Card,\n  Button,\n  Form,\n  Col,\n  Row,\n} from \"react-bootstrap\";\nimport { getTwoNumbers, OPTIONS_TYPE } from \"./utility\";\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      scope: localStorage.getItem(\"scope\") || 100,\n      howMany: localStorage.getItem(\"howMany\") || 100,\n      type: JSON.parse(localStorage.getItem(\"type\")) || [\n        OPTIONS_TYPE[0],\n        OPTIONS_TYPE[1],\n      ],\n      class01: localStorage.getItem(\"class01\") || \"\",\n      name: localStorage.getItem(\"name\") || \"\",\n      time: localStorage.getItem(\"time\") || 5,\n      copy: localStorage.getItem(\"copy\") || 3,\n      tableContent: [],\n    };\n  }\n\n  onClickPrint = () => {\n    window.print();\n  };\n\n  changeInput = (e, name) => {\n    console.log(\"e.target.value\", e.target.value);\n    this.setState({\n      [name]: e.target.value,\n    });\n  };\n\n  getTableContent = () => {\n    const { howMany, scope } = this.state;\n    let tableContent01 = [];\n    for (let i = 0; i < howMany / 5; i++) {\n      let tr01 = [];\n      let j;\n      for (j = 0; j < 5; j++) {\n        tr01.push(this.getTd(scope));\n      }\n      tableContent01.push(<tr className=\"medium-font-2\">{tr01}</tr>);\n    }\n    this.setState({\n      tableContent: tableContent01,\n    });\n  };\n\n  getTd = () => {\n    const { scope: max } = this.state;\n\n    if (!max) return null;\n    let obj01 = getTwoNumbers(max);\n    return (\n      <td>\n        {obj01.a} {obj01.op1 === 1 ? \"+\" : \"-\"} {obj01.b}\n        {\" =\"}\n      </td>\n    );\n  };\n\n  onClickCreate = () => {\n    this.getTableContent();\n  };\n\n  onClickSaveParams = () => {\n    const { scope, howMany, type, class01, name, time, copy } = this.state;\n\n    localStorage.setItem(\"scope\", scope);\n    localStorage.setItem(\"howMany\", howMany);\n    localStorage.setItem(\"type\", JSON.stringify(type));\n    localStorage.setItem(\"class01\", class01);\n    localStorage.setItem(\"name\", name);\n    localStorage.setItem(\"time\", time);\n    localStorage.setItem(\"copy\", copy);\n  };\n\n  handleOnChange = (newValue) => {\n    this.setState({\n      type: newValue,\n    });\n  };\n\n  render() {\n    const {\n      scope,\n      howMany,\n      type,\n      class01,\n      name,\n      time,\n      copy,\n      tableContent,\n    } = this.state;\n\n    return (\n      <div className=\"App\">\n        <Container>\n          <Card className=\"no-print\">\n            <Card.Header className=\"text-center large-font\">\n              加减法口算练习题在线生成工具\n            </Card.Header>\n            <Card.Body>\n              <Form>\n                <Form.Row>\n                  <Form.Group as={Col} controlId=\"formScope\">\n                    <Form.Label>范围: {scope}以内</Form.Label>\n                    <Form.Control\n                      value={scope}\n                      onChange={(e) => this.changeInput(e, \"scope\")}\n                    />\n                  </Form.Group>\n\n                  <Form.Group as={Col} controlId=\"formHowMany\">\n                    <Form.Label>题数</Form.Label>\n                    <Form.Control\n                      placeholder=\"100\"\n                      value={howMany}\n                      onChange={(e) => this.changeInput(e, \"howMany\")}\n                    />\n                  </Form.Group>\n\n                  <Form.Group as={Col} controlId=\"formtype\">\n                    <Form.Label>题型</Form.Label>\n                    <Select\n                      options={OPTIONS_TYPE}\n                      onChange={this.handleOnChange}\n                      name=\"type\"\n                      isMulti\n                      value={type}\n                    />\n                  </Form.Group>\n                </Form.Row>\n                <Form.Row>\n                  <Form.Group as={Col} controlId=\"formName\">\n                    <Form.Label>姓名</Form.Label>\n                    <Form.Control\n                      value={name}\n                      onChange={(e) => this.changeInput(e, \"name\")}\n                    />\n                  </Form.Group>\n                  <Form.Group as={Col} controlId=\"formClass\">\n                    <Form.Label>班级</Form.Label>\n                    <Form.Control\n                      value={class01}\n                      onChange={(e) => this.changeInput(e, \"class01\")}\n                    />\n                  </Form.Group>\n                  <Form.Group as={Col} controlId=\"formTime\">\n                    <Form.Label>时间（分钟）</Form.Label>\n                    <Form.Control\n                      value={time}\n                      onChange={(e) => this.changeInput(e, \"time\")}\n                    />\n                  </Form.Group>\n                  <Form.Group as={Col} controlId=\"formCopy\">\n                    <Form.Label>份数</Form.Label>\n                    <Form.Control\n                      placeholder=\"3\"\n                      value={copy}\n                      onChange={(e) => this.changeInput(e, \"copy\")}\n                    />\n                  </Form.Group>\n                </Form.Row>\n              </Form>\n              <div className=\"mb-2\">\n                <Button\n                  variant=\"primary\"\n                  size=\"lg\"\n                  onClick={this.onClickSaveParams}\n                >\n                  保存参数\n                </Button>{\" \"}\n                <Button\n                  variant=\"primary\"\n                  size=\"lg\"\n                  onClick={this.onClickCreate}\n                >\n                  生成习题\n                </Button>{\" \"}\n                <Button variant=\"primary\" size=\"lg\" onClick={this.onClickPrint}>\n                  打印\n                </Button>\n              </div>\n            </Card.Body>\n          </Card>\n\n          <Card id=\"printme\">\n            <Card.Header></Card.Header>\n            <Card.Body>\n              <Table responsive>\n                <thead>\n                  <tr>\n                    <th colSpan={5} className=\"text-center large-font\">\n                      {scope}以内加减法口算练习题\n                    </th>\n                  </tr>\n                  <tr className=\"medium-font\">\n                    <th>姓名：{name ? name : \"____________\"}</th>\n                    <th>\n                      班级：\n                      {class01 ? class01 : \"____________\"}\n                    </th>\n                    <th>20___年___月___日</th>\n                    <th>\n                      用时：\n                      {time ? time : \"______\"} 分钟\n                    </th>\n                    <th>做对：_____/{howMany} 题</th>\n                  </tr>\n                </thead>\n                <tbody>{tableContent}</tbody>\n              </Table>\n            </Card.Body>\n          </Card>\n        </Container>\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}